plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'me.marek2810'
version = '1.0-SNAPSHOT'

ext {
    targetJavaVersion = 21
}

// Repozitáre pre všetky projekty
allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }
    }
}

// Lombok + toolchain pre všetky subprojekty
subprojects {
    apply plugin: 'java'

    java {
        def javaVersion = JavaVersion.toVersion(rootProject.ext.targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        toolchain.languageVersion.set(JavaLanguageVersion.of(rootProject.ext.targetJavaVersion))
    }
//
//    dependencies {
//        compileOnly 'org.projectlombok:lombok:1.18.34'
//        annotationProcessor 'org.projectlombok:lombok:1.18.34'
//    }
}

// Root dependencies
dependencies {
//    compileOnly 'org.projectlombok:lombok:1.18.34'
//    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation project(':api')
    implementation project(':NMS1_21_4')
}

// Root Java toolchain + sources/javadoc
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))

    withSourcesJar()
    withJavadocJar()
}

// ------------------------------
// Aggregate jar pre root projekt
// ------------------------------
tasks.register('aggregateJar', Jar) {
    archiveBaseName.set('PersoLib')
    archiveClassifier.set('')   // normálny jar
    archiveVersion.set('')

    // Skopíruj všetky kompilované triedy z subprojektov
    from subprojects.collect { it.sourceSets.main.output }
}

// Shadow jar (fat jar)
tasks.named('shadowJar') {
    archiveBaseName.set("PersoLib")
    archiveClassifier.set('all')   // unikátny classifier
    archiveVersion.set('')
    mergeServiceFiles()
    configurations = [project.configurations.runtimeClasspath]
}

// build závisí na shadowJar
tasks.named('build') {
    dependsOn tasks.named('shadowJar')
    dependsOn tasks.named('aggregateJar') // aby sa skompiloval aj normálny jar
}

// ------------------------------
// Publishing do Maven Local
// ------------------------------
publishing {
    publications {
        myLib(MavenPublication) {
            // normálny jar s triedami zo subprojektov
            artifact(tasks.named('aggregateJar'))

            // shadow jar
            artifact(tasks.named('shadowJar'))

            // sources a javadoc
            artifact(tasks.named('sourcesJar'))
            artifact(tasks.named('javadocJar'))

            groupId = project.group
            artifactId = 'PersoLib'
            version = project.version
        }
    }

    repositories {
        mavenLocal()
    }
}
