plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'me.marek2810'
version = '1.0.0'

ext {
    targetJavaVersion = 21
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "spigotmc-repo"
            url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
        }
    }
}

subprojects {
    apply plugin: 'java'

    java {
        def javaVersion = JavaVersion.toVersion(rootProject.ext.targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        toolchain.languageVersion.set(JavaLanguageVersion.of(rootProject.ext.targetJavaVersion))
    }
}

dependencies {
    implementation project(':api')
    implementation project(':core')
    implementation project(':nms_v1_21_R3')
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))

    withSourcesJar()
    withJavadocJar()
}

tasks.register('aggregateJar', Jar) {
    archiveBaseName.set('PersoLib')
    archiveClassifier.set('')
    archiveVersion.set('')

    from subprojects.collect { it.sourceSets.main.output }
}

tasks.named('shadowJar') {
    archiveBaseName.set("PersoLib")
    archiveClassifier.set('all')
    archiveVersion.set('')
    mergeServiceFiles()
    configurations = [project.configurations.runtimeClasspath]
}

tasks.named('build') {
    dependsOn tasks.named('shadowJar')
    dependsOn tasks.named('aggregateJar')
}

publishing {
    publications {
        myLib(MavenPublication) {
            artifact(tasks.named('aggregateJar'))

            artifact(tasks.named('shadowJar'))

            artifact(tasks.named('sourcesJar'))
            artifact(tasks.named('javadocJar'))

            groupId = project.group
            artifactId = 'PersoLib'
            version = project.version
        }
    }

    repositories {
        mavenLocal()
    }
}
